import 'package:flutter/material.dart';
import '../theme/app_colors.dart';
import '../../core/services/auth_service.dart';

class AuthScreen extends StatefulWidget {
  const AuthScreen({super.key});

  @override
  State<AuthScreen> createState() => _AuthScreenState();
}

class _AuthScreenState extends State<AuthScreen> {
  final PageController _pageController = PageController();
  bool _isLogin = true;
  bool _isLoading = false;
  bool _isSubmitting = false;

  // ÁôªÂΩïË°®Âçï
  final _loginFormKey = GlobalKey<FormState>();
  final _loginEmailController = TextEditingController();
  final _loginPasswordController = TextEditingController();

  // Ê≥®ÂÜåË°®Âçï
  final _registerFormKey = GlobalKey<FormState>();
  final _registerEmailController = TextEditingController();
  final _registerPasswordController = TextEditingController();
  final _registerUsernameController = TextEditingController();
  final _confirmPasswordController = TextEditingController();

  @override
  void dispose() {
    _pageController.dispose();
    _loginEmailController.dispose();
    _loginPasswordController.dispose();
    _registerEmailController.dispose();
    _registerPasswordController.dispose();
    _registerUsernameController.dispose();
    _confirmPasswordController.dispose();
    super.dispose();
  }

  void _switchAuthMode() {
    setState(() {
      _isLogin = !_isLogin;
    });
    _pageController.animateToPage(
      _isLogin ? 0 : 1,
      duration: const Duration(milliseconds: 300),
      curve: Curves.easeInOut,
    );
  }

  void _showMessage(String message, {bool isError = false}) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: isError ? AppColors.error : AppColors.success,
        duration: const Duration(seconds: 3),
      ),
    );
  }

  Future<void> _handleLogin() async {
    if (!_loginFormKey.currentState!.validate()) return;

    // ÂèåÈáçÈò≤ÈáçÂ§çÊèê‰∫§‰øùÊä§
    if (_isLoading || _isSubmitting) return;

    setState(() {
      _isLoading = true;
      _isSubmitting = true;
    });

    try {
      final result = await AuthService.login(
        email: _loginEmailController.text.trim(),
        password: _loginPasswordController.text,
      );

      if (result['success']) {
        _showMessage('ÁôªÂΩïÊàêÂäüÔºÅÊ¨¢ËøéÂõûÊù• üéâ');
        if (mounted) {
          Navigator.of(context).pop(result['user']);
        }
      } else {
        _showMessage(result['message'], isError: true);
      }
    } finally {
      if (mounted) {
        setState(() {
          _isLoading = false;
          _isSubmitting = false;
        });
      }
    }
  }

  Future<void> _handleRegister() async {
    if (!_registerFormKey.currentState!.validate()) return;

    // ÂèåÈáçÈò≤ÈáçÂ§çÊèê‰∫§‰øùÊä§
    if (_isLoading || _isSubmitting) return;

    setState(() {
      _isLoading = true;
      _isSubmitting = true;
    });

    try {
      final result = await AuthService.register(
        email: _registerEmailController.text.trim(),
        password: _registerPasswordController.text,
        username: _registerUsernameController.text.trim().isEmpty
            ? null
            : _registerUsernameController.text.trim(),
      );

      if (result['success']) {
        _showMessage(result['message']);
        // Ê≥®ÂÜåÊàêÂäüÂêéÊòæÁ§∫ÈÇÆÁÆ±È™åËØÅÊèêÁ§∫
        _showEmailVerificationDialog(result['user']['email']);
      } else {
        _showMessage(result['message'], isError: true);
      }
    } finally {
      if (mounted) {
        setState(() {
          _isLoading = false;
          _isSubmitting = false;
        });
      }
    }
  }

  void _showEmailVerificationDialog(String email) {
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => AlertDialog(
        title: const Row(
          children: [
            Icon(Icons.email, color: AppColors.primary),
            SizedBox(width: 8),
            Text('È™åËØÅÈÇÆÁÆ±'),
          ],
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text('È™åËØÅÈÇÆ‰ª∂Â∑≤ÂèëÈÄÅÂà∞Ôºö\n$email'),
            const SizedBox(height: 16),
            const Text(
              'ËØ∑Êü•Êî∂ÈÇÆ‰ª∂Âπ∂ÁÇπÂáªÈ™åËØÅÈìæÊé•ÂÆåÊàêÊ≥®ÂÜå„ÄÇÈÇÆ‰ª∂ÂèØËÉΩÂú®ÂûÉÂúæÈÇÆÁÆ±‰∏≠ÔºåËØ∑Ê≥®ÊÑèÊü•Áúã„ÄÇ',
              style: TextStyle(fontSize: 14, color: Colors.grey),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () async {
              final result = await AuthService.resendVerification(email);
              _showMessage(result['message'], isError: !result['success']);
            },
            child: const Text('ÈáçÊñ∞ÂèëÈÄÅ'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.of(context).pop();
              _switchAuthMode(); // ÂàáÊç¢Âà∞ÁôªÂΩïÈ°µÈù¢
            },
            child: const Text('ÂâçÂæÄÁôªÂΩï'),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white,
      appBar: AppBar(
        backgroundColor: Colors.transparent,
        elevation: 0,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back_ios, color: AppColors.textDark),
          onPressed: () => Navigator.of(context).pop(),
        ),
      ),
      body: Column(
        children: [
          // Ê†áÈ¢òÂíåÂàáÊç¢Âô®
          Container(
            padding: const EdgeInsets.symmetric(horizontal: 24, vertical: 20),
            child: Column(
              children: [
                const Text(
                  'üèÉ‚Äç‚ôÇÔ∏è Ë∑ëÊ≠•ËøΩË∏™Âô®',
                  style: TextStyle(
                    fontSize: 28,
                    fontWeight: FontWeight.bold,
                    color: AppColors.primary,
                  ),
                ),
                const SizedBox(height: 8),
                const Text(
                  'ËÆ∞ÂΩï‰Ω†ÁöÑÊØè‰∏ÄÊ≠•Á≤æÂΩ©ÔºÅ',
                  style: TextStyle(
                    fontSize: 16,
                    color: AppColors.textMedium,
                  ),
                ),
                const SizedBox(height: 32),
                // ÂàáÊç¢Âô®
                Container(
                  decoration: BoxDecoration(
                    color: AppColors.cardBackground,
                    borderRadius: BorderRadius.circular(25),
                  ),
                  child: Row(
                    children: [
                      Expanded(
                        child: GestureDetector(
                          onTap: () {
                            if (!_isLogin) _switchAuthMode();
                          },
                          child: Container(
                            padding: const EdgeInsets.symmetric(vertical: 12),
                            decoration: BoxDecoration(
                              color: _isLogin ? AppColors.primary : Colors.transparent,
                              borderRadius: BorderRadius.circular(25),
                            ),
                            child: Text(
                              'ÁôªÂΩï',
                              textAlign: TextAlign.center,
                              style: TextStyle(
                                color: _isLogin ? Colors.white : AppColors.textMedium,
                                fontWeight: FontWeight.w600,
                              ),
                            ),
                          ),
                        ),
                      ),
                      Expanded(
                        child: GestureDetector(
                          onTap: () {
                            if (_isLogin) _switchAuthMode();
                          },
                          child: Container(
                            padding: const EdgeInsets.symmetric(vertical: 12),
                            decoration: BoxDecoration(
                              color: !_isLogin ? AppColors.primary : Colors.transparent,
                              borderRadius: BorderRadius.circular(25),
                            ),
                            child: Text(
                              'Ê≥®ÂÜå',
                              textAlign: TextAlign.center,
                              style: TextStyle(
                                color: !_isLogin ? Colors.white : AppColors.textMedium,
                                fontWeight: FontWeight.w600,
                              ),
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
          // Ë°®ÂçïÂÜÖÂÆπ
          Expanded(
            child: PageView(
              controller: _pageController,
              onPageChanged: (index) {
                setState(() {
                  _isLogin = index == 0;
                });
              },
              children: [
                _buildLoginForm(),
                _buildRegisterForm(),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildLoginForm() {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(24),
      child: Form(
        key: _loginFormKey,
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            const Text(
              'Ê¨¢ËøéÂõûÊù•',
              style: TextStyle(
                fontSize: 24,
                fontWeight: FontWeight.bold,
                color: AppColors.textDark,
              ),
            ),
            const SizedBox(height: 8),
            const Text(
              'ËØ∑ËæìÂÖ•ÊÇ®ÁöÑÁôªÂΩï‰ø°ÊÅØ',
              style: TextStyle(
                fontSize: 16,
                color: AppColors.textMedium,
              ),
            ),
            const SizedBox(height: 32),

            // ÈÇÆÁÆ±ËæìÂÖ•
            TextFormField(
              controller: _loginEmailController,
              keyboardType: TextInputType.emailAddress,
              decoration: const InputDecoration(
                labelText: 'ÈÇÆÁÆ±Âú∞ÂùÄ',
                prefixIcon: Icon(Icons.email_outlined),
                border: OutlineInputBorder(),
              ),
              validator: (value) {
                if (value == null || value.isEmpty) {
                  return 'ËØ∑ËæìÂÖ•ÈÇÆÁÆ±Âú∞ÂùÄ';
                }
                if (!RegExp(r'^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$').hasMatch(value)) {
                  return 'ËØ∑ËæìÂÖ•ÊúâÊïàÁöÑÈÇÆÁÆ±Âú∞ÂùÄ';
                }
                return null;
              },
            ),
            const SizedBox(height: 16),

            // ÂØÜÁ†ÅËæìÂÖ•
            TextFormField(
              controller: _loginPasswordController,
              obscureText: true,
              decoration: const InputDecoration(
                labelText: 'ÂØÜÁ†Å',
                prefixIcon: Icon(Icons.lock_outline),
                border: OutlineInputBorder(),
              ),
              validator: (value) {
                if (value == null || value.isEmpty) {
                  return 'ËØ∑ËæìÂÖ•ÂØÜÁ†Å';
                }
                return null;
              },
            ),
            const SizedBox(height: 32),

            // ÁôªÂΩïÊåâÈíÆ
            ElevatedButton(
              onPressed: _isLoading ? null : _handleLogin,
              style: ElevatedButton.styleFrom(
                backgroundColor: AppColors.primary,
                foregroundColor: Colors.white,
                padding: const EdgeInsets.symmetric(vertical: 16),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(8),
                ),
              ),
              child: _isLoading
                  ? const Row(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        SizedBox(
                          width: 20,
                          height: 20,
                          child: CircularProgressIndicator(
                            strokeWidth: 2,
                            valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                          ),
                        ),
                        SizedBox(width: 12),
                        Text('ÁôªÂΩï‰∏≠...'),
                      ],
                    )
                  : const Text(
                      'ÁôªÂΩï',
                      style: TextStyle(fontSize: 16, fontWeight: FontWeight.w600),
                    ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildRegisterForm() {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(24),
      child: Form(
        key: _registerFormKey,
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            const Text(
              'ÂàõÂª∫Ë¥¶Êà∑',
              style: TextStyle(
                fontSize: 24,
                fontWeight: FontWeight.bold,
                color: AppColors.textDark,
              ),
            ),
            const SizedBox(height: 8),
            const Text(
              'ÂºÄÂßãÊÇ®ÁöÑË∑ëÊ≠•‰πãÊóÖ',
              style: TextStyle(
                fontSize: 16,
                color: AppColors.textMedium,
              ),
            ),
            const SizedBox(height: 32),

            // ÈÇÆÁÆ±ËæìÂÖ•
            TextFormField(
              controller: _registerEmailController,
              keyboardType: TextInputType.emailAddress,
              decoration: const InputDecoration(
                labelText: 'ÈÇÆÁÆ±Âú∞ÂùÄ',
                prefixIcon: Icon(Icons.email_outlined),
                border: OutlineInputBorder(),
              ),
              validator: (value) {
                if (value == null || value.isEmpty) {
                  return 'ËØ∑ËæìÂÖ•ÈÇÆÁÆ±Âú∞ÂùÄ';
                }
                if (!RegExp(r'^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$').hasMatch(value)) {
                  return 'ËØ∑ËæìÂÖ•ÊúâÊïàÁöÑÈÇÆÁÆ±Âú∞ÂùÄ';
                }
                return null;
              },
            ),
            const SizedBox(height: 16),

            // Áî®Êà∑ÂêçËæìÂÖ•ÔºàÂèØÈÄâÔºâ
            TextFormField(
              controller: _registerUsernameController,
              decoration: const InputDecoration(
                labelText: 'Áî®Êà∑ÂêçÔºàÂèØÈÄâÔºâ',
                prefixIcon: Icon(Icons.person_outline),
                border: OutlineInputBorder(),
                helperText: 'ÁïôÁ©∫Â∞Ü‰ΩøÁî®ÈÇÆÁÆ±ÂâçÁºÄ‰Ωú‰∏∫Áî®Êà∑Âêç',
              ),
              validator: (value) {
                if (value != null && value.isNotEmpty && value.length < 2) {
                  return 'Áî®Êà∑ÂêçËá≥Â∞ëÈúÄË¶Å2‰∏™Â≠óÁ¨¶';
                }
                return null;
              },
            ),
            const SizedBox(height: 16),

            // ÂØÜÁ†ÅËæìÂÖ•
            TextFormField(
              controller: _registerPasswordController,
              obscureText: true,
              decoration: const InputDecoration(
                labelText: 'ÂØÜÁ†Å',
                prefixIcon: Icon(Icons.lock_outline),
                border: OutlineInputBorder(),
                helperText: 'Ëá≥Â∞ë6‰∏™Â≠óÁ¨¶',
              ),
              validator: (value) {
                if (value == null || value.isEmpty) {
                  return 'ËØ∑ËæìÂÖ•ÂØÜÁ†Å';
                }
                if (value.length < 6) {
                  return 'ÂØÜÁ†ÅËá≥Â∞ëÈúÄË¶Å6‰∏™Â≠óÁ¨¶';
                }
                return null;
              },
            ),
            const SizedBox(height: 16),

            // Á°ÆËÆ§ÂØÜÁ†Å
            TextFormField(
              controller: _confirmPasswordController,
              obscureText: true,
              decoration: const InputDecoration(
                labelText: 'Á°ÆËÆ§ÂØÜÁ†Å',
                prefixIcon: Icon(Icons.lock_outline),
                border: OutlineInputBorder(),
              ),
              validator: (value) {
                if (value == null || value.isEmpty) {
                  return 'ËØ∑Á°ÆËÆ§ÂØÜÁ†Å';
                }
                if (value != _registerPasswordController.text) {
                  return '‰∏§Ê¨°ËæìÂÖ•ÁöÑÂØÜÁ†Å‰∏ç‰∏ÄËá¥';
                }
                return null;
              },
            ),
            const SizedBox(height: 32),

            // Ê≥®ÂÜåÊåâÈíÆ
            ElevatedButton(
              onPressed: _isLoading ? null : _handleRegister,
              style: ElevatedButton.styleFrom(
                backgroundColor: AppColors.primary,
                foregroundColor: Colors.white,
                padding: const EdgeInsets.symmetric(vertical: 16),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(8),
                ),
              ),
              child: _isLoading
                  ? const Row(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        SizedBox(
                          width: 20,
                          height: 20,
                          child: CircularProgressIndicator(
                            strokeWidth: 2,
                            valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                          ),
                        ),
                        SizedBox(width: 12),
                        Text('Ê≥®ÂÜå‰∏≠...'),
                      ],
                    )
                  : const Text(
                      'Ê≥®ÂÜå',
                      style: TextStyle(fontSize: 16, fontWeight: FontWeight.w600),
                    ),
            ),
            const SizedBox(height: 16),

            // ÊèêÁ§∫ÊñáÊú¨
            const Text(
              'Ê≥®ÂÜåÂç≥Ë°®Á§∫ÊÇ®ÂêåÊÑèÊàë‰ª¨ÁöÑÊúçÂä°Êù°Ê¨æÂíåÈöêÁßÅÊîøÁ≠ñ',
              style: TextStyle(
                fontSize: 12,
                color: AppColors.textMedium,
              ),
              textAlign: TextAlign.center,
            ),
          ],
        ),
      ),
    );
  }
}
